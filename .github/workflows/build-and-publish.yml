name: Build And Publish

on:
  # TODO: wait for remove workflow_dispatch event
  workflow_dispatch:
  push:
    tags: '*'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # SIGN_AND_NOTARIZE: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
  SIGN_AND_NOTARIZE: true

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Export version as variable
        run: |
          # create variable
          VERSION=$(node -p "require('./package.json').version")

          # export version variable
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "Current version: $VERSION"

          echo "TEST_BUILD_HASH=" >> "$GITHUB_ENV"
        shell: bash

      - name: Check tag and version
        if: github.ref_name != 'v$VERSION'
        run: |
          echo "Push tag version different with project version, tag=$GITHUB_REF_NAME, project=v$VERSION"
          exit 1

      - name: Install Dependencies
        run: npm ci

      - name: Build Project
        run: npm run build

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}

      - name: Install the Apple certificate and api key
        if: ${{ runner.os == 'macOS' && env.SIGN_AND_NOTARIZE == 'true' }}
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          API_KEY_BASE64: ${{ secrets.API_KEY_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          API_KEY_PATH=$RUNNER_TEMP/auth_key.p8
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and api key from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo "CSC_LINK=$CERTIFICATE_PATH" >> "$GITHUB_ENV"
          echo "CSC_KEY_PASSWORD=$P12_PASSWORD" >> "$GITHUB_ENV"
          echo -n "$API_KEY_BASE64" | base64 --decode -o $API_KEY_PATH
          echo "APPLE_API_KEY=$API_KEY_PATH" >> "$GITHUB_ENV"

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build Windows App
        if: ${{ runner.os == 'Windows' }}
        run: npm run dist

      - name: Build Linux App
        if: ${{ runner.os == 'Linux' }}
        run: npm run dist-linux

      - name: Build macOS App
        if: ${{ runner.os == 'macOS' }}
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        run: npm run dist-mac

      - name: Upload to Cloud Storage
        run: |
          echo "Current version: $VERSION"
          npm i ali-oss
          node ./scripts/upload-oss.js
        env:
          ALI_OSS_REGION: ${{ vars.ALI_OSS_REGION }}
          ALI_OSS_ACCESS_KEY_ID: ${{ secrets.ALI_OSS_ACCESS_KEY_ID }}
          ALI_OSS_ACCESS_KEY_SECRET: ${{ secrets.ALI_OSS_ACCESS_KEY_SECRET }}
          ALI_OSS_BUCKET: ${{ vars.ALI_OSS_BUCKET }}
          ALI_OSS_ENDPOINT: ${{ vars.ALI_OSS_ENDPOINT }}
          ALI_OSS_RELEASE_PATH: ${{ vars.ALI_OSS_RELEASE_PATH }}
        shell: bash
