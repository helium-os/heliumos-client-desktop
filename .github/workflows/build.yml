name: Build
on:
  workflow_dispatch:
  pull_request:
    types:
      - closed
  push:
    branches: [main]
# develop pushes and repository_dispatch handled in build_develop.yaml
env:
  # These must be set for fetchdep.sh to get the right branch
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  REPOSITORY: ${{ github.repository }}
  PR_NUMBER: ${{ github.event.pull_request.number }}
jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 720
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install the Apple certificate and api key
        if: ${{ matrix.os == 'macos-latest' }}
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          API_KEY_BASE64: ${{ secrets.API_KEY_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          API_KEY_PATH=$RUNNER_TEMP/auth_key.p8
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and api key from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo "CSC_LINK=$CERTIFICATE_PATH" >> "$GITHUB_ENV"
          echo "CSC_KEY_PASSWORD=$P12_PASSWORD" >> "$GITHUB_ENV"
          echo -n "$API_KEY_BASE64" | base64 --decode -o $API_KEY_PATH
          echo "APPLE_API_KEY=$API_KEY_PATH" >> "$GITHUB_ENV"

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.17.x'

      - name: Export version to variable
        run: |
          npm install npm@8.15.0 -g
          npm install --registry=https://registry.npmjs.org/
          node getVersion.js
          export VERSION=$(cat version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Release
        uses: softprops/action-gh-release@v0.1.15
        with:
          tag_name: v${{ env.VERSION }}

      - name: Install Dependencies&&Build
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        run: |
          npm run build

          if [ "$RUNNER_OS" == "Windows" ]; then
          sh build.sh

          fi
          if [ "$RUNNER_OS" == "Linux" ]; then
          sh build-linux.sh
          fi
          if [ "$RUNNER_OS" == "macOS" ]; then
          sh build-mac.sh
          fi
        shell: bash

      # - name: Release
      #   uses: softprops/action-gh-release@v0.1.15
      #   with:
      #     tag_name: v${{ env.VERSION }}
      #     files: |
      #      dist/HeliumOS-${{ env.VERSION }}.dmg
      #      dist/HeliumOS-${{ env.VERSION }}-mac.zip
      #      dist/HeliumOS-${{ env.VERSION }}.dmg.blockmap
      #      dist/HeliumOS-${{ env.VERSION }}-mac.zip.blockmap
      #      dist/latest-mac.yml
      #      dist/HeliumOS Setup ${{ env.VERSION }}.exe
      #      dist/HeliumOS Setup ${{ env.VERSION }}.exe.blockmap
      #      dist/latest.yml
      #      dist/HeliumOS-${{ env.VERSION }}.AppImage
      #      dist/HeliumOS-${{ env.VERSION }}.zip
